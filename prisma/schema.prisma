// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  name      String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Subscription relationship
  subscription UserSubscription?
  
  // Product processing history
  productProcesses ProductProcess[]
  
  // Usage tracking
  usageRecords UsageRecord[]
  
  // Credits for processing
  credits Credit[]

  @@map("users")
}

// Subscription model linked to Clerk Billing
model UserSubscription {
  id                 String                 @id @default(cuid())
  userId             String                 @unique
  clerkSubscriptionId String?              @unique // Clerk billing subscription ID
  stripeCustomerId   String?               @unique // If using Stripe through Clerk
  stripeSubscriptionId String?             @unique
  planId             String
  planName           String
  status             SubscriptionStatus
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean               @default(false)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan SubscriptionPlan @relation(fields: [planId], references: [id])

  @@map("user_subscriptions")
}

// Subscription plans
model SubscriptionPlan {
  id                String   @id @default(cuid())
  name              String   @unique
  displayName       String
  description       String?
  price             Int      // in cents
  interval          String   // monthly, yearly
  creditsIncluded   Int      @default(0)
  maxProcessingSize Int      // max file size in MB
  features          Json     // JSON array of features
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  subscriptions UserSubscription[]

  @@map("subscription_plans")
}

// Product processing records
model ProductProcess {
  id              String         @id @default(cuid())
  userId          String
  originalImageId String
  processedImageId String?
  status          ProcessStatus
  processingType  ProcessingType @default(BACKGROUND_REMOVAL)
  creditsUsed     Int            @default(1)
  
  // Generated content
  title           String?
  description     String?        @db.Text
  seoKeywords     String[]       // Array of keywords
  
  // Processing metadata
  processingTime  Int?           // in milliseconds
  errorMessage    String?        @db.Text
  
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  user           User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  originalImage  Image @relation("OriginalImages", fields: [originalImageId], references: [id])
  processedImage Image? @relation("ProcessedImages", fields: [processedImageId], references: [id])

  @@map("product_processes")
}

// Image storage model
model Image {
  id            String     @id @default(cuid())
  filename      String
  originalName  String?
  url           String     // S3 or Cloudinary URL
  size          Int        // file size in bytes
  width         Int?
  height        Int?
  format        String     // jpg, png, webp
  isProcessed   Boolean    @default(false)
  metadata      Json?      // Additional image metadata
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Relations
  originalProcesses  ProductProcess[] @relation("OriginalImages")
  processedProcesses ProductProcess[] @relation("ProcessedImages")

  @@map("images")
}

// Credit system for users
model Credit {
  id          String      @id @default(cuid())
  userId      String
  amount      Int         // positive for credit, negative for debit
  type        CreditType
  description String?
  
  // Link to subscription or purchase
  subscriptionId String?
  processId      String?
  
  createdAt   DateTime    @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("credits")
}

// Usage tracking for analytics
model UsageRecord {
  id           String   @id @default(cuid())
  userId       String
  action       String   // "background_removal", "description_generation", etc.
  creditsUsed  Int      @default(0)
  metadata     Json?    // Additional usage data
  createdAt    DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("usage_records")
}

// API usage limits and tracking
model ApiUsage {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String
  requests  Int      @default(0)
  date      DateTime @db.Date
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, endpoint, date])
  @@map("api_usage")
}

// Enums
enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  INCOMPLETE
  TRIAL
}

enum ProcessStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum ProcessingType {
  BACKGROUND_REMOVAL
  DESCRIPTION_GENERATION
  BOTH
}

enum CreditType {
  SUBSCRIPTION_GRANT
  PURCHASE
  BONUS
  USAGE
  REFUND
}